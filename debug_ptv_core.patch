diff --git a/pyptv/ui/ptv_core.py b/pyptv/ui/ptv_core.py
index b0ba13f..eef0d70 100644
--- a/pyptv/ui/ptv_core.py
+++ b/pyptv/ui/ptv_core.py
@@ -9,6 +9,7 @@ import os
 import sys
 import time
 import importlib
+import logging
 from pathlib import Path
 import numpy as np
 from skimage.io import imread
@@ -28,6 +29,15 @@ from pyptv.yaml_parameters import (
     CriteriaParams
 )
 
+# Set up logging
+logging.basicConfig(
+    level=logging.DEBUG,
+    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
+    handlers=[
+        logging.StreamHandler(sys.stdout)
+    ]
+)
+logger = logging.getLogger('ptv_core')
 
 class PTVCore:
     """Core class to handle PTV functionality in the modern UI.
@@ -45,13 +55,15 @@ class PTVCore:
         """
         # Set paths
         self.exp_path = Path(exp_path) if exp_path else Path.cwd()
+        logger.debug(f"Initializing PTVCore with experiment path: {self.exp_path}")
         self.software_path = Path(software_path) if software_path else Path.cwd()
         
         # Initialize parameter manager
         params_dir = self.exp_path / "parameters"
         self.param_manager = ParameterManager(params_dir)
+        logger.debug(f"Created parameter manager for directory: {params_dir}")
         self.yaml_params = None
         
         # Initialize plugin system
         self.plugins = {}
         self._load_plugins()
@@ -75,6 +87,7 @@ class PTVCore:
     
     def _load_plugins(self):
         """Load the available plugins."""
+        logger.debug("Loading plugins...")
         # Load sequence plugins
         sequence_plugins = Path(os.path.abspath(os.curdir)) / "sequence_plugins.txt"
         if sequence_plugins.exists():
@@ -83,6 +96,7 @@ class PTVCore:
                 self.plugins["sequence"] = ["default"] + plugins
         else:
             self.plugins["sequence"] = ["default"]
+            logger.debug(f"No sequence_plugins.txt found, using default only")
         
         # Load tracking plugins
         tracking_plugins = Path(os.path.abspath(os.curdir)) / "tracking_plugins.txt"
@@ -92,31 +106,37 @@ class PTVCore:
                 self.plugins["tracking"] = ["default"] + plugins
         else:
             self.plugins["tracking"] = ["default"]
+            logger.debug(f"No tracking_plugins.txt found, using default only")
+        
+        logger.debug(f"Loaded plugins: {self.plugins}")
     
     def initialize(self):
         """Initialize the PTV system using YAML parameters.
         """
         # Change to experiment directory
         if self.exp_path.exists():
+            logger.debug(f"Changing directory to: {self.exp_path}")
             os.chdir(self.exp_path)
+        else:
+            logger.warning(f"Experiment path does not exist: {self.exp_path}")
         
         # Load parameters from YAML
         try:
             self.load_yaml_parameters()
-            print("Using YAML parameters")
+            logger.info("Using YAML parameters")
             
             # Get number of cameras from YAML params
             self.n_cams = self.yaml_params.get("PtvParams").n_img
+            logger.debug(f"Number of cameras from parameters: {self.n_cams}")
             
             # Get image dimensions
             imx = self.yaml_params.get("PtvParams").imx
             imy = self.yaml_params.get("PtvParams").imy
+            logger.debug(f"Image dimensions: {imx}x{imy}")
             
             # Get reference images from sequence params
             seq_params = self.yaml_params.get("SequenceParams")
             ref_images = []
-            
-            # Safely get image paths for each camera
+            logger.debug("Getting reference image paths for each camera")
             for i in range(1, self.n_cams + 1):
                 image_attr = f"Name_{i}_Image"
                 if hasattr(seq_params, image_attr):
@@ -124,6 +144,7 @@ class PTVCore:
                     ref_images.append(img_path)
                 else:
                     ref_images.append(None)
+                    logger.warning(f"No image path for camera {i} (missing {image_attr})")
             
             # Initialize images array
             self.orig_images = [None] * self.n_cams
@@ -138,14 +159,18 @@ class PTVCore:
                             
                         img = imread(img_path)
                         if img.ndim > 2:
+                            logger.debug(f"Converting color image to grayscale for camera {i+1}")
                             img = rgb2gray(img)
                         self.orig_images[i] = img_as_ubyte(img)
+                        logger.debug(f"Loaded image for camera {i+1}: {img_path}")
                     else:
-                        print(f"Warning: Reference image for camera {i+1} not found, using blank image")
+                        logger.warning(f"Reference image for camera {i+1} not found, using blank image")
                         self.orig_images[i] = np.zeros((imy, imx), dtype=np.uint8)
                 except Exception as e:
-                    print(f"Error loading image {i+1}: {e}")
+                    logger.error(f"Error loading image {i+1}: {e}")
                     self.orig_images[i] = np.zeros((imy, imx), dtype=np.uint8)
+            
+            logger.info(f"Loaded {len(self.orig_images)} camera images")
             
             # Initialize PTV parameters through the existing code
             try:
@@ -158,11 +183,13 @@ class PTVCore:
                     self.tpar,
                     self.cals,
                     self.epar,
+                logger.info("Successfully initialized PTV core parameters")
                 ) = ptv.py_start_proc_c(self.n_cams)
             except Exception as init_error:
-                print(f"Error initializing core PTV: {init_error}")
+                logger.error(f"Error initializing core PTV: {init_error}")
                 # Check if experiment attribute exists before creating
                 if not hasattr(self, 'experiment'):
                     from pyptv import Experiment
+                    logger.info(f"Creating legacy Experiment object with {self.n_cams} cameras")
                     self.experiment = Experiment(self.n_cams)
                     self.experiment.initialize(self.exp_path, self.software_path)
                 raise init_error
@@ -170,13 +197,15 @@ class PTVCore:
             # Mark as initialized
             self.initialized = True
             
+            logger.info("Initialization completed successfully")
             return self.orig_images
             
         except Exception as e:
-            print(f"Failed to initialize: {e}")
+            logger.error(f"Failed to initialize: {e}")
+            import traceback
+            logger.error(traceback.format_exc())
             self.initialized = False
             return []
-        
     def load_yaml_parameters(self):
         """Load parameters from YAML files."""
         # Load all parameter types