[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "PurePath",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "linspace",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "meshgrid",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "linspace",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "meshgrid",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "exp",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sort",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "compress",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matrix",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "newaxis",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "transpose",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "invert",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "isnan",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "skimage.io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "skimage.io",
        "description": "skimage.io",
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "skimage.io",
        "description": "skimage.io",
        "isExtraImport": true,
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "skimage.io",
        "description": "skimage.io",
        "isExtraImport": true,
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "skimage.io",
        "description": "skimage.io",
        "isExtraImport": true,
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "skimage.io",
        "description": "skimage.io",
        "isExtraImport": true,
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "skimage.io",
        "description": "skimage.io",
        "isExtraImport": true,
        "detail": "skimage.io",
        "documentation": {}
    },
    {
        "label": "img_as_ubyte",
        "importPath": "skimage.util",
        "description": "skimage.util",
        "isExtraImport": true,
        "detail": "skimage.util",
        "documentation": {}
    },
    {
        "label": "img_as_ubyte",
        "importPath": "skimage.util",
        "description": "skimage.util",
        "isExtraImport": true,
        "detail": "skimage.util",
        "documentation": {}
    },
    {
        "label": "rgb2gray",
        "importPath": "skimage.color",
        "description": "skimage.color",
        "isExtraImport": true,
        "detail": "skimage.color",
        "documentation": {}
    },
    {
        "label": "rgb2gray",
        "importPath": "skimage.color",
        "description": "skimage.color",
        "isExtraImport": true,
        "detail": "skimage.color",
        "documentation": {}
    },
    {
        "label": "rgb2gray",
        "importPath": "skimage.color",
        "description": "skimage.color",
        "isExtraImport": true,
        "detail": "skimage.color",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Code",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Range",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Directory",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Array",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Instance",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "observe",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Str",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "Trait",
        "importPath": "traits.api",
        "description": "traits.api",
        "isExtraImport": true,
        "detail": "traits.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "HGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "VGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "ListEditor",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "ListEditor",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "HGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "VGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "ListEditor",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Action",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "CloseAction",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "MenuBar",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "OKCancelButtons",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Separator",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "HGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "VGroup",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Tabbed",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "spring",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "ListEditor",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "TreeEditor",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Separator",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "traitsui.api",
        "description": "traitsui.api",
        "isExtraImport": true,
        "detail": "traitsui.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.component_editor",
        "description": "enable.component_editor",
        "isExtraImport": true,
        "detail": "enable.component_editor",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.component_editor",
        "description": "enable.component_editor",
        "isExtraImport": true,
        "detail": "enable.component_editor",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.component_editor",
        "description": "enable.component_editor",
        "isExtraImport": true,
        "detail": "enable.component_editor",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "gray",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayDataSource",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "LinearMapper",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "gray",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "viridis",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "viridis",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "gray",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ImageData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "PlotGraphicsContext",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayDataSource",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "LinearMapper",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "gray",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "add_default_grids",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "add_default_axes",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "AbstractDataSource",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ScatterPlot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "Plot",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ArrayPlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ScatterInspectorOverlay",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "TextBoxOverlay",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "DataFramePlotData",
        "importPath": "chaco.api",
        "description": "chaco.api",
        "isExtraImport": true,
        "detail": "chaco.api",
        "documentation": {}
    },
    {
        "label": "ImageInspectorTool",
        "importPath": "chaco.tools.image_inspector_tool",
        "description": "chaco.tools.image_inspector_tool",
        "isExtraImport": true,
        "detail": "chaco.tools.image_inspector_tool",
        "documentation": {}
    },
    {
        "label": "ImageInspectorTool",
        "importPath": "chaco.tools.image_inspector_tool",
        "description": "chaco.tools.image_inspector_tool",
        "isExtraImport": true,
        "detail": "chaco.tools.image_inspector_tool",
        "documentation": {}
    },
    {
        "label": "ImageInspectorTool",
        "importPath": "chaco.tools.image_inspector_tool",
        "description": "chaco.tools.image_inspector_tool",
        "isExtraImport": true,
        "detail": "chaco.tools.image_inspector_tool",
        "documentation": {}
    },
    {
        "label": "ImageInspectorOverlay",
        "importPath": "chaco.tools.image_inspector_tool",
        "description": "chaco.tools.image_inspector_tool",
        "isExtraImport": true,
        "detail": "chaco.tools.image_inspector_tool",
        "documentation": {}
    },
    {
        "label": "ImageInspectorTool",
        "importPath": "chaco.tools.image_inspector_tool",
        "description": "chaco.tools.image_inspector_tool",
        "isExtraImport": true,
        "detail": "chaco.tools.image_inspector_tool",
        "documentation": {}
    },
    {
        "label": "BetterZoom",
        "importPath": "chaco.tools.better_zoom",
        "description": "chaco.tools.better_zoom",
        "isExtraImport": true,
        "detail": "chaco.tools.better_zoom",
        "documentation": {}
    },
    {
        "label": "BetterZoom",
        "importPath": "chaco.tools.better_zoom",
        "description": "chaco.tools.better_zoom",
        "isExtraImport": true,
        "detail": "chaco.tools.better_zoom",
        "documentation": {}
    },
    {
        "label": "TextBoxOverlay",
        "importPath": "pyptv.text_box_overlay",
        "description": "pyptv.text_box_overlay",
        "isExtraImport": true,
        "detail": "pyptv.text_box_overlay",
        "documentation": {}
    },
    {
        "label": "TextBoxOverlay",
        "importPath": "pyptv.text_box_overlay",
        "description": "pyptv.text_box_overlay",
        "isExtraImport": true,
        "detail": "pyptv.text_box_overlay",
        "documentation": {}
    },
    {
        "label": "codeEditor",
        "importPath": "pyptv.code_editor",
        "description": "pyptv.code_editor",
        "isExtraImport": true,
        "detail": "pyptv.code_editor",
        "documentation": {}
    },
    {
        "label": "QuiverPlot",
        "importPath": "pyptv.quiverplot",
        "description": "pyptv.quiverplot",
        "isExtraImport": true,
        "detail": "pyptv.quiverplot",
        "documentation": {}
    },
    {
        "label": "QuiverPlot",
        "importPath": "pyptv.quiverplot",
        "description": "pyptv.quiverplot",
        "isExtraImport": true,
        "detail": "pyptv.quiverplot",
        "documentation": {}
    },
    {
        "label": "QuiverPlot",
        "importPath": "pyptv.quiverplot",
        "description": "pyptv.quiverplot",
        "isExtraImport": true,
        "detail": "pyptv.quiverplot",
        "documentation": {}
    },
    {
        "label": "image_coordinates",
        "importPath": "optv.imgcoord",
        "description": "optv.imgcoord",
        "isExtraImport": true,
        "detail": "optv.imgcoord",
        "documentation": {}
    },
    {
        "label": "convert_arr_metric_to_pixel",
        "importPath": "optv.transforms",
        "description": "optv.transforms",
        "isExtraImport": true,
        "detail": "optv.transforms",
        "documentation": {}
    },
    {
        "label": "optv.orientation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "match_detection_to_ref",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "external_calibration",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "full_calibration",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "point_positions",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "external_calibration",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "full_calibration",
        "importPath": "optv.orientation",
        "description": "optv.orientation",
        "isExtraImport": true,
        "detail": "optv.orientation",
        "documentation": {}
    },
    {
        "label": "Calibration",
        "importPath": "optv.calibration",
        "description": "optv.calibration",
        "isExtraImport": true,
        "detail": "optv.calibration",
        "documentation": {}
    },
    {
        "label": "Calibration",
        "importPath": "optv.calibration",
        "description": "optv.calibration",
        "isExtraImport": true,
        "detail": "optv.calibration",
        "documentation": {}
    },
    {
        "label": "TargetArray",
        "importPath": "optv.tracking_framebuf",
        "description": "optv.tracking_framebuf",
        "isExtraImport": true,
        "detail": "optv.tracking_framebuf",
        "documentation": {}
    },
    {
        "label": "CORRES_NONE",
        "importPath": "optv.tracking_framebuf",
        "description": "optv.tracking_framebuf",
        "isExtraImport": true,
        "detail": "optv.tracking_framebuf",
        "documentation": {}
    },
    {
        "label": "read_targets",
        "importPath": "optv.tracking_framebuf",
        "description": "optv.tracking_framebuf",
        "isExtraImport": true,
        "detail": "optv.tracking_framebuf",
        "documentation": {}
    },
    {
        "label": "TargetArray",
        "importPath": "optv.tracking_framebuf",
        "description": "optv.tracking_framebuf",
        "isExtraImport": true,
        "detail": "optv.tracking_framebuf",
        "documentation": {}
    },
    {
        "label": "ptv",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameter_gui",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameters",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameters",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "ptv",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameters",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameters",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "parameters",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "ptv",
        "importPath": "pyptv",
        "description": "pyptv",
        "isExtraImport": true,
        "detail": "pyptv",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "img_as_ubyte",
        "importPath": "skimage",
        "description": "skimage",
        "isExtraImport": true,
        "detail": "skimage",
        "documentation": {}
    },
    {
        "label": "target_recognition",
        "importPath": "optv.segmentation",
        "description": "optv.segmentation",
        "isExtraImport": true,
        "detail": "optv.segmentation",
        "documentation": {}
    },
    {
        "label": "target_recognition",
        "importPath": "optv.segmentation",
        "description": "optv.segmentation",
        "isExtraImport": true,
        "detail": "optv.segmentation",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Component",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "Component",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ColorTrait",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ComponentEditor",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "ColorTrait",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "AbstractOverlay",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "black_color_trait",
        "importPath": "enable.api",
        "description": "enable.api",
        "isExtraImport": true,
        "detail": "enable.api",
        "documentation": {}
    },
    {
        "label": "PanTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "ZoomTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "PanTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "ZoomTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "PanTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "ZoomTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "PanTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "ZoomTool",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "ScatterInspector",
        "importPath": "chaco.tools.api",
        "description": "chaco.tools.api",
        "isExtraImport": true,
        "detail": "chaco.tools.api",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "find_resource",
        "importPath": "traits.util.resource",
        "description": "traits.util.resource",
        "isExtraImport": true,
        "detail": "traits.util.resource",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "correspondences",
        "importPath": "optv.correspondences",
        "description": "optv.correspondences",
        "isExtraImport": true,
        "detail": "optv.correspondences",
        "documentation": {}
    },
    {
        "label": "MatchedCoords",
        "importPath": "optv.correspondences",
        "description": "optv.correspondences",
        "isExtraImport": true,
        "detail": "optv.correspondences",
        "documentation": {}
    },
    {
        "label": "preprocess_image",
        "importPath": "optv.image_processing",
        "description": "optv.image_processing",
        "isExtraImport": true,
        "detail": "optv.image_processing",
        "documentation": {}
    },
    {
        "label": "ControlParams",
        "importPath": "optv.parameters",
        "description": "optv.parameters",
        "isExtraImport": true,
        "detail": "optv.parameters",
        "documentation": {}
    },
    {
        "label": "VolumeParams",
        "importPath": "optv.parameters",
        "description": "optv.parameters",
        "isExtraImport": true,
        "detail": "optv.parameters",
        "documentation": {}
    },
    {
        "label": "TrackingParams",
        "importPath": "optv.parameters",
        "description": "optv.parameters",
        "isExtraImport": true,
        "detail": "optv.parameters",
        "documentation": {}
    },
    {
        "label": "SequenceParams",
        "importPath": "optv.parameters",
        "description": "optv.parameters",
        "isExtraImport": true,
        "detail": "optv.parameters",
        "documentation": {}
    },
    {
        "label": "TargetParams",
        "importPath": "optv.parameters",
        "description": "optv.parameters",
        "isExtraImport": true,
        "detail": "optv.parameters",
        "documentation": {}
    },
    {
        "label": "Tracker",
        "importPath": "optv.tracker",
        "description": "optv.tracker",
        "isExtraImport": true,
        "detail": "optv.tracker",
        "documentation": {}
    },
    {
        "label": "default_naming",
        "importPath": "optv.tracker",
        "description": "optv.tracker",
        "isExtraImport": true,
        "detail": "optv.tracker",
        "documentation": {}
    },
    {
        "label": "epipolar_curve",
        "importPath": "optv.epipolar",
        "description": "optv.epipolar",
        "isExtraImport": true,
        "detail": "optv.epipolar",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "py_start_proc_c",
        "importPath": "pyptv.ptv",
        "description": "pyptv.ptv",
        "isExtraImport": true,
        "detail": "pyptv.ptv",
        "documentation": {}
    },
    {
        "label": "py_trackcorr_init",
        "importPath": "pyptv.ptv",
        "description": "pyptv.ptv",
        "isExtraImport": true,
        "detail": "pyptv.ptv",
        "documentation": {}
    },
    {
        "label": "py_sequence_loop",
        "importPath": "pyptv.ptv",
        "description": "pyptv.ptv",
        "isExtraImport": true,
        "detail": "pyptv.ptv",
        "documentation": {}
    },
    {
        "label": "ETSConfig",
        "importPath": "traits.etsconfig.api",
        "description": "traits.etsconfig.api",
        "isExtraImport": true,
        "detail": "traits.etsconfig.api",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "optv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optv",
        "description": "optv",
        "detail": "optv",
        "documentation": {}
    },
    {
        "label": "Action",
        "importPath": "traitsui.menu",
        "description": "traitsui.menu",
        "isExtraImport": true,
        "detail": "traitsui.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "traitsui.menu",
        "description": "traitsui.menu",
        "isExtraImport": true,
        "detail": "traitsui.menu",
        "documentation": {}
    },
    {
        "label": "MenuBar",
        "importPath": "traitsui.menu",
        "description": "traitsui.menu",
        "isExtraImport": true,
        "detail": "traitsui.menu",
        "documentation": {}
    },
    {
        "label": "CalibrationGUI",
        "importPath": "pyptv.calibration_gui",
        "description": "pyptv.calibration_gui",
        "isExtraImport": true,
        "detail": "pyptv.calibration_gui",
        "documentation": {}
    },
    {
        "label": "DirectoryEditorDialog",
        "importPath": "pyptv.directory_editor",
        "description": "pyptv.directory_editor",
        "isExtraImport": true,
        "detail": "pyptv.directory_editor",
        "documentation": {}
    },
    {
        "label": "Experiment",
        "importPath": "pyptv.parameter_gui",
        "description": "pyptv.parameter_gui",
        "isExtraImport": true,
        "detail": "pyptv.parameter_gui",
        "documentation": {}
    },
    {
        "label": "Paramset",
        "importPath": "pyptv.parameter_gui",
        "description": "pyptv.parameter_gui",
        "isExtraImport": true,
        "detail": "pyptv.parameter_gui",
        "documentation": {}
    },
    {
        "label": "DetectionGUI",
        "importPath": "pyptv.detection_gui",
        "description": "pyptv.detection_gui",
        "isExtraImport": true,
        "detail": "pyptv.detection_gui",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy.random",
        "description": "numpy.random",
        "isExtraImport": true,
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "KivaFont",
        "importPath": "kiva.trait_defs.kiva_font_trait",
        "description": "kiva.trait_defs.kiva_font_trait",
        "isExtraImport": true,
        "detail": "kiva.trait_defs.kiva_font_trait",
        "documentation": {}
    },
    {
        "label": "ClickerTool",
        "kind": 6,
        "importPath": "calibration_gui",
        "description": "calibration_gui",
        "peekOfCode": "class ClickerTool(ImageInspectorTool):\n    left_changed = Int(1)\n    right_changed = Int(1)\n    x = 0\n    y = 0\n    def normal_left_down(self, event):\n        \"\"\"Handles the left mouse button being clicked.\n        Fires the **new_value** event with the data (if any) from the event's\n        position.\n        \"\"\"",
        "detail": "calibration_gui",
        "documentation": {}
    },
    {
        "label": "PlotWindow",
        "kind": 6,
        "importPath": "calibration_gui",
        "description": "calibration_gui",
        "peekOfCode": "class PlotWindow(HasTraits):\n    _plot = Instance(Plot)\n    _click_tool = Instance(ClickerTool)\n    _right_click_avail = 0\n    name = Str\n    view = View(\n        Item(name=\"_plot\", editor=ComponentEditor(), show_label=False),\n    )\n    def __init__(self):\n        # super(HasTraits, self).__init__()",
        "detail": "calibration_gui",
        "documentation": {}
    },
    {
        "label": "CalibrationGUI",
        "kind": 6,
        "importPath": "calibration_gui",
        "description": "calibration_gui",
        "peekOfCode": "class CalibrationGUI(HasTraits):\n    status_text = Str(\"\")\n    ori_img_name = []\n    ori_img = []\n    pass_init = Bool(False)\n    pass_sortgrid = Bool(False)\n    pass_raw_orient = Bool(False)\n    pass_init_disabled = Bool(False)\n    # -------------------------------------------------------------\n    button_edit_cal_parameters = Button()",
        "detail": "calibration_gui",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def cli():\n    return \"CLI template\"",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "oriEditor",
        "kind": 6,
        "importPath": "code_editor",
        "description": "code_editor",
        "peekOfCode": "class oriEditor(HasTraits):\n    file_Path = File\n    ori_Code = Code()\n    ori_Save = Button(label=\"Save\")\n    buttons_group = Group(\n        Item(name=\"file_Path\", style=\"simple\", show_label=False, width=0.3),\n        Item(name=\"ori_Save\", show_label=False),\n        orientation=\"horizontal\",\n    )\n    traits_view = View(",
        "detail": "code_editor",
        "documentation": {}
    },
    {
        "label": "codeEditor",
        "kind": 6,
        "importPath": "code_editor",
        "description": "code_editor",
        "peekOfCode": "class codeEditor(HasTraits):\n    # number of images\n    n_img = Int()\n    oriEditors = List\n    # view\n    traits_view = View(\n        Item(\n            \"oriEditors\",\n            style=\"custom\",\n            editor=ListEditor(",
        "detail": "code_editor",
        "documentation": {}
    },
    {
        "label": "get_path",
        "kind": 2,
        "importPath": "code_editor",
        "description": "code_editor",
        "peekOfCode": "def get_path(filename):\n    splitted_filename = filename.split(\"/\")\n    return (\n        os.getcwd()\n        + os.sep\n        + splitted_filename[0]\n        + os.sep\n        + splitted_filename[1]\n    )\ndef get_code(path):",
        "detail": "code_editor",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "code_editor",
        "description": "code_editor",
        "peekOfCode": "def get_code(path):\n    f = open(path, \"r\")\n    retCode = f.read()\n    f.close()\n    return retCode\nclass oriEditor(HasTraits):\n    file_Path = File\n    ori_Code = Code()\n    ori_Save = Button(label=\"Save\")\n    buttons_group = Group(",
        "detail": "code_editor",
        "documentation": {}
    },
    {
        "label": "ClickerTool",
        "kind": 6,
        "importPath": "detection_gui",
        "description": "detection_gui",
        "peekOfCode": "class ClickerTool(ImageInspectorTool):\n    left_changed = Int(1)\n    right_changed = Int(1)\n    x = 0\n    y = 0\n    def __init__(self, *args, **kwargs):\n        super(ClickerTool, self).__init__(*args, **kwargs)\n    def normal_left_down(self, event):\n        \"\"\" Handles the left mouse button being clicked.\n        Fires the **new_value** event with the data (if any) from the event's",
        "detail": "detection_gui",
        "documentation": {}
    },
    {
        "label": "PlotWindow",
        "kind": 6,
        "importPath": "detection_gui",
        "description": "detection_gui",
        "peekOfCode": "class PlotWindow(HasTraits):\n    \"\"\" Plot window traits component \"\"\"\n    _plot_data = Instance(ArrayPlotData)\n    _plot = Instance(Plot)\n    _click_tool = Instance(ClickerTool)\n    _img_plot = Instance(ImagePlot)\n    _right_click_avail = 0\n    name = Str\n    view = View(\n        Item(name='_plot', editor=ComponentEditor(), show_label=False),",
        "detail": "detection_gui",
        "documentation": {}
    },
    {
        "label": "DetectionGUI",
        "kind": 6,
        "importPath": "detection_gui",
        "description": "detection_gui",
        "peekOfCode": "class DetectionGUI(HasTraits):\n    \"\"\" detection GUI \"\"\"\n    status_text = Str(\" status \")\n    # -------------------------------------------------------------\n    # grey_thresh= Range(1,255,5,mode='slider')\n    size_of_crosses = Int(4, label='Size of crosses')\n    # button_edit_cal_parameters = Button()\n    button_showimg = Button(label='Load image')\n    hp_flag = Bool(False,label='highpass')\n    inverse_flag = Bool(False, label='inverse')",
        "detail": "detection_gui",
        "documentation": {}
    },
    {
        "label": "DirectoryEditorDialog",
        "kind": 6,
        "importPath": "directory_editor",
        "description": "directory_editor",
        "peekOfCode": "class DirectoryEditorDialog(HasTraits):\n    \"\"\"Define the main DirectoryEditor demo class.\"\"\"\n    # Define a Directory trait to view:\n    dir_name = Directory\n    # Display specification (one Item per editor style):\n    dir_item = Item(\"dir_name\", style=\"simple\", label=\"Simple\")\n    # Demo view:\n    view = View(\n        dir_item,\n        title=\"Choose the experimental directory\",",
        "detail": "directory_editor",
        "documentation": {}
    },
    {
        "label": "plot_3d_target",
        "kind": 2,
        "importPath": "draw_3d_target",
        "description": "draw_3d_target",
        "peekOfCode": "def plot_3d_target(filename):\n    d = np.loadtxt(filename)\n    # %%\n    from mpl_toolkits.mplot3d import Axes3D\n    ax = plt.figure(figsize=(12,10)).add_subplot(projection='3d')\n    # \n    for row in d:\n        ax.plot(row[1],row[2],row[3],'ro')\n        ax.text(row[1],row[2],row[3],f'{row[0]:.0f}',None)\n    ax.set_xlim(d[:,1].min(),d[:,1].max())",
        "detail": "draw_3d_target",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "kind": 6,
        "importPath": "ext_sequence_denis",
        "description": "ext_sequence_denis",
        "peekOfCode": "class Sequence:\n    \"\"\"Sequence class defines external tracking addon for pyptv\n    User needs to implement the following functions:\n            do_sequence(self)\n    Connection to C ptv module is given via self.ptv and provided by pyptv software\n    Connection to active parameters is given via self.exp1 and provided by pyptv software.\n    User responsibility is to read necessary files, make the calculations and write the files back.\n    \"\"\"\n    def __init__(self, ptv=None, exp1=None, camera_list=None):\n        self.ptv = ptv",
        "detail": "ext_sequence_denis",
        "documentation": {}
    },
    {
        "label": "Tracking",
        "kind": 6,
        "importPath": "ext_tracker_denis",
        "description": "ext_tracker_denis",
        "peekOfCode": "class Tracking:\n    \"\"\"Tracking class defines external tracking addon for pyptv\n    User needs to implement the following functions:\n            do_tracking(self)\n            do_back_tracking(self)\n    Connection to C ptv module is given via self.ptv and provided by pyptv software\n    Connection to active parameters is given via self.exp1 and provided by pyptv software.\n    User responsibility is to read necessary files, make the calculations and write the files back.\n    \"\"\"\n    def __init__(self, ptv=None, exp1=None):",
        "detail": "ext_tracker_denis",
        "documentation": {}
    },
    {
        "label": "Demo",
        "kind": 6,
        "importPath": "image_inspector",
        "description": "image_inspector",
        "peekOfCode": "class Demo(HasTraits):\n    plot = Instance(Component)\n    traits_view = View(\n        Group(\n            Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),\n            orientation=\"vertical\",\n        ),\n        resizable=True,\n        title=title,\n    )",
        "detail": "image_inspector",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "image_inspector",
        "description": "image_inspector",
        "peekOfCode": "size = (800, 600)\ntitle = \"Inspecting a Colormapped Image Plot\"\n# ===============================================================================\n# # Demo class that is used by the demo.py application.\n# ===============================================================================\nclass Demo(HasTraits):\n    plot = Instance(Component)\n    traits_view = View(\n        Group(\n            Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),",
        "detail": "image_inspector",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "image_inspector",
        "description": "image_inspector",
        "peekOfCode": "title = \"Inspecting a Colormapped Image Plot\"\n# ===============================================================================\n# # Demo class that is used by the demo.py application.\n# ===============================================================================\nclass Demo(HasTraits):\n    plot = Instance(Component)\n    traits_view = View(\n        Group(\n            Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),\n            orientation=\"vertical\",",
        "detail": "image_inspector",
        "documentation": {}
    },
    {
        "label": "demo",
        "kind": 5,
        "importPath": "image_inspector",
        "description": "image_inspector",
        "peekOfCode": "demo = Demo()\nif __name__ == \"__main__\":\n    demo.configure_traits()",
        "detail": "image_inspector",
        "documentation": {}
    },
    {
        "label": "ImagePlot",
        "kind": 6,
        "importPath": "imageplot",
        "description": "imageplot",
        "peekOfCode": "class ImagePlot(HasTraits):\n    plot = Instance(Plot)\n    traits_view = View(\n        Item(\"plot\", editor=ComponentEditor(), show_label=False),\n        width=600,\n        height=600,\n        resizable=True,\n        title=\"Chaco Plot\",\n    )\n    def __init__(self):",
        "detail": "imageplot",
        "documentation": {}
    },
    {
        "label": "demo",
        "kind": 5,
        "importPath": "imageplot",
        "description": "imageplot",
        "peekOfCode": "demo = ImagePlot()\nif __name__ == \"__main__\":\n    demo.configure_traits()",
        "detail": "imageplot",
        "documentation": {}
    },
    {
        "label": "DemoView",
        "kind": 6,
        "importPath": "imread_chaco",
        "description": "imread_chaco",
        "peekOfCode": "class DemoView(HasTraits):\n    ### Public Traits ##########################################################\n    # A Plot Data object to hold our image data\n    pd = Instance(ArrayPlotData, ())\n    # A Plot object to plot our image data\n    plot = Instance(Plot)\n    ### Private Traits #########################################################\n    # File name to load image from\n    resource_path = os.path.join(\"examples\", \"basic\", \"capitol.jpg\")\n    alt_path = \"capitol.jpg\"",
        "detail": "imread_chaco",
        "documentation": {}
    },
    {
        "label": "DemoController",
        "kind": 6,
        "importPath": "imread_chaco",
        "description": "imread_chaco",
        "peekOfCode": "class DemoController(Handler):\n    # The HasTraits object we are a controller for\n    view = Instance(DemoView)\n    # ---------------------------------------------------------------------------\n    # Public 'DemoController' interface\n    # ---------------------------------------------------------------------------\n    def init(self, info):\n        \"\"\"Initializes the controls of a user interface.\n        Overridden here to assign the 'view' trait.\n        \"\"\"",
        "detail": "imread_chaco",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "imread_chaco",
        "description": "imread_chaco",
        "peekOfCode": "def main(argv=None):\n    view = DemoView()\n    view.configure_traits()\n# -------------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    sys.exit(main())",
        "detail": "imread_chaco",
        "documentation": {}
    },
    {
        "label": "popup",
        "kind": 5,
        "importPath": "imread_chaco",
        "description": "imread_chaco",
        "peekOfCode": "popup = DemoView()\n# -------------------------------------------------------------------------------\n# Function 'main'\n# -------------------------------------------------------------------------------\ndef main(argv=None):\n    view = DemoView()\n    view.configure_traits()\n# -------------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    sys.exit(main())",
        "detail": "imread_chaco",
        "documentation": {}
    },
    {
        "label": "ParamHandler",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class ParamHandler(Handler):\n    def closed(self, info, is_ok):\n        mainParams = info.object\n        par_path = mainParams.par_path\n        Handler.closed(self, info, is_ok)\n        if is_ok:\n            img_name = [\n                mainParams.Name_1_Image,\n                mainParams.Name_2_Image,\n                mainParams.Name_3_Image,",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "CalHandler",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class CalHandler(Handler):\n    def closed(self, info, is_ok):\n        calibParams = info.object\n        par_path = calibParams.par_path\n        print(\"inside CalHandler \", par_path)\n        Handler.closed(self, info, is_ok)\n        if is_ok:\n            img_cal_name = [\n                calibParams.cam_1,\n                calibParams.cam_2,",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "TrackHandler",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class TrackHandler(Handler):\n    def closed(self, info, is_ok):\n        trackParams = info.object\n        par_path = trackParams.par_path\n        Handler.closed(self, info, is_ok)\n        if is_ok:\n            par.TrackingParams(\n                trackParams.dvxmin,\n                trackParams.dvxmax,\n                trackParams.dvymin,",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Tracking_Params",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class Tracking_Params(HasTraits):\n    dvxmin = Float(DEFAULT_FLOAT)\n    dvxmax = Float(DEFAULT_FLOAT)\n    dvymin = Float(DEFAULT_FLOAT)\n    dvymax = Float(DEFAULT_FLOAT)\n    dvzmin = Float(DEFAULT_FLOAT)\n    dvzmax = Float(DEFAULT_FLOAT)\n    angle = Float(DEFAULT_FLOAT)\n    dacc = Float(DEFAULT_FLOAT)\n    flagNewParticles = Bool(True)",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Main_Params",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class Main_Params(HasTraits):\n    # loading parameters files:\n    # read main parameters\n    # Panel 1: General\n    Num_Cam = Int(4, label=\"Number of cameras: \")\n    Accept_OnlyAllCameras = Bool(\n        False, label=\"Accept only points seen from all cameras?\"\n    )\n    pair_Flag = Bool(False, label=\"Include pairs\")\n    pair_enable_flag = Bool(True)",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Calib_Params",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class Calib_Params(HasTraits):\n    # general and unsed variables\n    pair_enable_flag = Bool(True)\n    n_img = Int(DEFAULT_INT)\n    img_name = List\n    img_cal = List\n    hp_flag = Bool(False, label=\"highpass\")\n    allcam_flag = Bool(False, label=\"all camera targets\")\n    mmp_n1 = Float(DEFAULT_FLOAT)\n    mmp_n2 = Float(DEFAULT_FLOAT)",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Paramset",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class Paramset(HasTraits):\n    name = Str\n    par_path = Path\n    m_params = Instance(Main_Params)\n    c_params = Instance(Calib_Params)\n    t_params = Instance(Tracking_Params)\nclass Experiment(HasTraits):\n    active_params = Instance(Paramset)\n    paramsets = List(Paramset)\n    def __init__(self):",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Experiment",
        "kind": 6,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "class Experiment(HasTraits):\n    active_params = Instance(Paramset)\n    paramsets = List(Paramset)\n    def __init__(self):\n        HasTraits.__init__(self)\n        self.changed_active_params = False\n    def getParamsetIdx(self, paramset):\n        if isinstance(\n                paramset,\n                type(1)):  # integer value (index of the paramset)",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_STRING",
        "kind": 5,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "DEFAULT_STRING = \"---\"\nDEFAULT_INT = -999\nDEFAULT_FLOAT = -999.0\n# define handler function for main parameters\nclass ParamHandler(Handler):\n    def closed(self, info, is_ok):\n        mainParams = info.object\n        par_path = mainParams.par_path\n        Handler.closed(self, info, is_ok)\n        if is_ok:",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_INT",
        "kind": 5,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "DEFAULT_INT = -999\nDEFAULT_FLOAT = -999.0\n# define handler function for main parameters\nclass ParamHandler(Handler):\n    def closed(self, info, is_ok):\n        mainParams = info.object\n        par_path = mainParams.par_path\n        Handler.closed(self, info, is_ok)\n        if is_ok:\n            img_name = [",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FLOAT",
        "kind": 5,
        "importPath": "parameter_gui",
        "description": "parameter_gui",
        "peekOfCode": "DEFAULT_FLOAT = -999.0\n# define handler function for main parameters\nclass ParamHandler(Handler):\n    def closed(self, info, is_ok):\n        mainParams = info.object\n        par_path = mainParams.par_path\n        Handler.closed(self, info, is_ok)\n        if is_ok:\n            img_name = [\n                mainParams.Name_1_Image,",
        "detail": "parameter_gui",
        "documentation": {}
    },
    {
        "label": "Parameters",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class Parameters(HasTraits):\n    # default path of the directory of the param files\n    default_path = Path(\"parameters\")\n    def __init__(self, path: Path=default_path):\n        HasTraits.__init__(self)\n        self.path = path.resolve()\n        self.exp_path = self.path.parent \n    # returns the name of the specific params file\n    def filename(self):\n        raise NotImplementedError()",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "PtvParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class PtvParams(Parameters):\n    \"\"\"ptv.par\n    ptv.par:        main parameter file\n    4       number of cameras\n    cam3.100        image of first camera\n    kal1    calibration data of first camera\n    cam0.100        image of second camera\n    kal3    calibration data of second camera\n    cam1.100        image of third camera\n    kal4    calibration data of third camera",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "CalOriParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class CalOriParams(Parameters):\n    \"\"\" calibration parameters:\n    cal_ori.par:    calibration plate, images, orientation files\n    ptv/ssc_cal.c3d control point file (point number, X, Y, Z in [mm], ASCII\n    kal1    calibration\n    kal1.ori    orientation\n    kal3    calibration\n    kal3.ori    orientation\n    kal4    calibration\n    kal4.ori    orientation",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "SequenceParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class SequenceParams(Parameters):\n    \"\"\"\n    sequence.par: sequence parameters\n    cam0. basename for 1.sequence\n    cam1. basename for 2. sequence\n    cam2. basename for 3. sequence\n    cam3. basename for 4. sequence\n    100  first image of sequence\n    119  last image of sequence\n    \"\"\"",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "CriteriaParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class CriteriaParams(Parameters):\n    \"\"\"\n    criteria.par:   object volume and correspondence parameters\n    0.0     illuminated layer data, xmin [mm]\n    -10.0   illuminated layer data, zmin [mm]\n    0.0     illuminated layer data, zmax [mm]\n    10.0    illuminated layer data, xmax [mm]\n    -10.0   illuminated layer data, zmin [mm]\n    0.0     illuminated layer data, zmax [mm]\n    0.02    min corr for ratio nx",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "TargRecParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class TargRecParams(Parameters):\n    \"\"\"\n    targ_rec.par:   parameters for particle detection\n    12      grey value threshold 1. image\n    12      grey value threshold 2. image\n    12      grey value threshold 3. image\n    12      grey value threshold 4. image\n    50      tolerable discontinuity in grey values\n    25      min npix, area covered by particle\n    400     max npix, area covered by particle",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ManOriParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class ManOriParams(Parameters):\n    \"\"\"\n    man_ori.par:    point number for manual pre-orientation\n    28      image 1 p1 on target plate (reference body)\n    48      image 1 p2\n    42      image 1 p3\n    22      image 1 p4\n    28      image 2 p1\n    48      image 2 p2\n    42      image 2 p3",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "DetectPlateParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class DetectPlateParams(Parameters):\n    \"\"\"\n    detect_plate.par: parameters for control point detection\n    30 grey value threshold 1. calibration image\n    30 grey value threshold 2. calibration image\n    30 grey value threshold 3. calibration image\n    30 grey value threshold 4. calibration image\n    40 tolerable discontinuity in grey values\n    25 min npix, area covered by particle\n    400 max npix, area covered by particle",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "OrientParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class OrientParams(Parameters):\n    \"\"\"\n    orient.par: flags for camera parameter usage 1=use, 0=unused\n    2 point number for orientation, in this case\n    every second point on the reference body is\n    used, 0 for using all points\n    1 principle distance\n    1 xp\n    9. Conclusion and perspectives\n    114",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "TrackingParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class TrackingParams(Parameters):\n    #     dvxmin = Float\n    #     dvxmax = Float\n    #     dvymin = Float\n    #     dvymax = Float\n    #     dvzmin = Float\n    #     dvzmax = Float\n    #     angle = Float\n    #     dacc = Float\n    #     flagNewParticles = Bool",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "PftVersionParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class PftVersionParams(Parameters):\n    #     Existing_Target = Int\n    def __init__(self, Existing_Target=Int, path=Parameters.default_path):\n        Parameters.__init__(self, path)\n        self.set(Existing_Target)\n    def set(self, Existing_Target=Int):\n        self.Existing_Target = Existing_Target\n    def filename(self):\n        return \"pft_version.par\"\n    def read(self):",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ExamineParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class ExamineParams(Parameters):\n    #     Examine_Flag = Bool\n    #     Combine_Flag = Bool\n    def __init__(\n        self,\n        Examine_Flag=Bool,\n        Combine_Flag=Bool,\n        path=Parameters.default_path,\n    ):\n        Parameters.__init__(self, path)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "DumbbellParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class DumbbellParams(Parameters):\n    \"\"\"\n    dumbbell parameters\n    5  eps (mm)\n    46.5 dumbbell scale\n    0.005 gradient descent factor\n    1 weight for dumbbell penalty\n    2 step size through sequence\n    500 num iterations per click\n    \"\"\"",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ShakingParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class ShakingParams(Parameters):\n    \"\"\"\n    shaking parameters\n    10000 - first frame\n    10004 - last frame\n    10 - max num points used per frame\n    5 - max number of frames to track\n    \"\"\"\n    #     shaking_first_frame = Int\n    #     shaking_last_frame = Int",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "MultiPlaneParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class MultiPlaneParams(Parameters):\n    # m parameters\n    \"\"\"\n    3 :    number of planes\n    img/calib_a_cam  : name of the plane\n    img/calib_b_cam  : name of the plane\n    img/calib_c_cam  : name of the plane\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "SortGridParams",
        "kind": 6,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "class SortGridParams(Parameters):\n    # m parameters\n    \"\"\"\n    20 :    pixels, radius of search for a target point\n    \"\"\"\n    def __init__(self, n_img=Int, radius=Int, path=Parameters.default_path):\n        Parameters.__init__(self, path)\n        self.set(n_img, radius)\n    def set(self, n_img=Int, radius=Int):\n        self.n_img = n_img",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "def g(f):\n    \"\"\" Returns a line without white spaces \"\"\"\n    return f.readline().strip()\n# Base class for all parameters classes\nclass Parameters(HasTraits):\n    # default path of the directory of the param files\n    default_path = Path(\"parameters\")\n    def __init__(self, path: Path=default_path):\n        HasTraits.__init__(self)\n        self.path = path.resolve()",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "def error(owner, msg):\n    print(f\"Exception caught, message: {msg}\")\ndef warning(msg):\n    print(f\"Warning message: {msg}\")\n# Reads a parameters directory and returns a dictionary with all parameter\n# objects\ndef readParamsDir(par_path):\n    # get n_img from ptv.par\n    ptvParams = PtvParams(path=par_path)\n    ptvParams.read()",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "def warning(msg):\n    print(f\"Warning message: {msg}\")\n# Reads a parameters directory and returns a dictionary with all parameter\n# objects\ndef readParamsDir(par_path):\n    # get n_img from ptv.par\n    ptvParams = PtvParams(path=par_path)\n    ptvParams.read()\n    n_img = ptvParams.n_img\n    n_pts = Int(4)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "readParamsDir",
        "kind": 2,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "def readParamsDir(par_path):\n    # get n_img from ptv.par\n    ptvParams = PtvParams(path=par_path)\n    ptvParams.read()\n    n_img = ptvParams.n_img\n    n_pts = Int(4)\n    ret = {\n        CalOriParams: CalOriParams(n_img, path=par_path),\n        SequenceParams: SequenceParams(n_img, path=par_path),\n        CriteriaParams: CriteriaParams(path=par_path),",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "copy_params_dir",
        "kind": 2,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "def copy_params_dir(src: Path, dest: Path):\n    \"\"\" Copying all parameter files from /src folder to /dest \n        including .dat, .par and .yaml files\n    \"\"\"\n    ext_set = (\"*.dat\", \"*.par\", \"*.yaml\")\n    files = []\n    for ext in ext_set:\n        files.extend(src.glob(ext))\n    # print(f'List of parameter files in {src} is \\n {files} \\n')    \n    # print(f'Destination folder is {dest.resolve()}')",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "par_dir_prefix",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "par_dir_prefix = str(\"parameters\")\nmax_cam = int(4)\ndef g(f):\n    \"\"\" Returns a line without white spaces \"\"\"\n    return f.readline().strip()\n# Base class for all parameters classes\nclass Parameters(HasTraits):\n    # default path of the directory of the param files\n    default_path = Path(\"parameters\")\n    def __init__(self, path: Path=default_path):",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "max_cam",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "max_cam = int(4)\ndef g(f):\n    \"\"\" Returns a line without white spaces \"\"\"\n    return f.readline().strip()\n# Base class for all parameters classes\nclass Parameters(HasTraits):\n    # default path of the directory of the param files\n    default_path = Path(\"parameters\")\n    def __init__(self, path: Path=default_path):\n        HasTraits.__init__(self)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "prepare_static_background",
        "description": "prepare_static_background",
        "peekOfCode": "N = 10\n# Read N images per camera\nfor cam_num in range(4):\n    filelist = list(pathlib.Path(f'img/Camera_{cam_num+1}/').rglob('*.tif')) # in some sets we use Camera_1, 2, 3, 4\n    filelist.sort()\n    print(filelist[:3], filelist[-3:])\n    image_array = []\n    for i, file in enumerate(filelist[:N]):\n        image_array.append(skio.imread(file))\n    image_array = np.array(image_array)",
        "detail": "prepare_static_background",
        "documentation": {}
    },
    {
        "label": "negative",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def negative(img):\n    \"\"\" Negative 8-bit image \"\"\"\n    return 255 - img\ndef simple_highpass(img, cpar):\n    \"\"\" Simple highpass is using liboptv preprocess_image \"\"\"\n    return preprocess_image(img, 0, cpar, 25)\ndef py_set_img(img, i):\n    \"\"\"Not used anymore, was transferring images to the C\"\"\"\n    pass\ndef py_start_proc_c(n_cams):",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "simple_highpass",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def simple_highpass(img, cpar):\n    \"\"\" Simple highpass is using liboptv preprocess_image \"\"\"\n    return preprocess_image(img, 0, cpar, 25)\ndef py_set_img(img, i):\n    \"\"\"Not used anymore, was transferring images to the C\"\"\"\n    pass\ndef py_start_proc_c(n_cams):\n    \"\"\"Read parameters\"\"\"\n    # Control parameters\n    cpar = ControlParams(n_cams)",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_set_img",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_set_img(img, i):\n    \"\"\"Not used anymore, was transferring images to the C\"\"\"\n    pass\ndef py_start_proc_c(n_cams):\n    \"\"\"Read parameters\"\"\"\n    # Control parameters\n    cpar = ControlParams(n_cams)\n    cpar.read_control_par(b\"parameters/ptv.par\")\n    # Sequence parameters\n    spar = SequenceParams(num_cams=n_cams)",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_start_proc_c",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_start_proc_c(n_cams):\n    \"\"\"Read parameters\"\"\"\n    # Control parameters\n    cpar = ControlParams(n_cams)\n    cpar.read_control_par(b\"parameters/ptv.par\")\n    # Sequence parameters\n    spar = SequenceParams(num_cams=n_cams)\n    spar.read_sequence_par(b\"parameters/sequence.par\", n_cams)\n    # Volume parameters\n    vpar = VolumeParams()",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_pre_processing_c",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_pre_processing_c(list_of_images, cpar):\n    \"\"\"Image pre-processing, mostly highpass filter, could be extended in\n    the future\n    Inputs:\n        list of images\n        cpar ControlParams()\n    \"\"\"\n    newlist = []\n    for img in list_of_images:\n        newlist.append(simple_highpass(img, cpar))",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_detection_proc_c",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_detection_proc_c(list_of_images, cpar, tpar, cals):\n    \"\"\"Detection of targets\"\"\"\n    pftVersionParams = par.PftVersionParams(path=Path(\"parameters\"))\n    pftVersionParams.read()\n    Existing_Target = bool(pftVersionParams.Existing_Target)\n    detections, corrected = [], []\n    for i_cam, img in enumerate(list_of_images):\n        if Existing_Target:\n            targs = read_targets(cpar.get_img_base_name(i_cam), 0)\n        else:",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_correspondences_proc_c",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_correspondences_proc_c(exp):\n    \"\"\"Provides correspondences\n    Inputs:\n        exp = info.object from the pyptv_gui\n    Outputs:\n        quadruplets, ... : four empty lists filled later with the\n    correspondences of quadruplets, triplets, pairs, and so on\n    \"\"\"\n    frame = 123456789  # just a temporary workaround. todo: think how to write\n    #        if any([len(det) == 0 for det in detections]):",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_determination_proc_c",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_determination_proc_c(n_cams, sorted_pos, sorted_corresp, corrected):\n    \"\"\"Returns 3d positions\"\"\"\n    # Control parameters\n    cpar = ControlParams(n_cams)\n    cpar.read_control_par(b\"parameters/ptv.par\")\n    # Volume parameters\n    vpar = VolumeParams()\n    vpar.read_volume_par(b\"parameters/criteria.par\")\n    cals = []\n    for i_cam in range(n_cams):",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_sequence_loop",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_sequence_loop(exp):\n    \"\"\"Runs a sequence of detection, stereo-correspondence, determination and stores\n    the data in the cam#.XXX_targets (rewritten) and rt_is.XXX files. Basically\n    it is to run the batch as in pyptv_batch.py without tracking\n    \"\"\"\n    n_cams, cpar, spar, vpar, tpar, cals = (\n        exp.n_cams,\n        exp.cpar,\n        exp.spar,\n        exp.vpar,",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_trackcorr_init",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_trackcorr_init(exp):\n    \"\"\"Reads all the necessary stuff into Tracker\"\"\"\n    tracker = Tracker(exp.cpar, exp.vpar, exp.track_par, exp.spar, exp.cals,\n                      default_naming)\n    return tracker\ndef py_trackcorr_loop():\n    \"\"\"Supposedly returns some lists of the linked targets at every step of a tracker\"\"\"\n    pass\ndef py_traject_loop():\n    \"\"\"Used to plot trajectories after the full run",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_trackcorr_loop",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_trackcorr_loop():\n    \"\"\"Supposedly returns some lists of the linked targets at every step of a tracker\"\"\"\n    pass\ndef py_traject_loop():\n    \"\"\"Used to plot trajectories after the full run\n    def py_traject_loop(seq):\n    global intx1_tr,intx2_tr,inty1_tr,inty2_tr,m1_tr\n    trajectories_c(seq, cpar)\n    intx1,intx2,inty1,inty2=[],[],[],[]\n    for i in range(cpar[0].num_cams):",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_traject_loop",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_traject_loop():\n    \"\"\"Used to plot trajectories after the full run\n    def py_traject_loop(seq):\n    global intx1_tr,intx2_tr,inty1_tr,inty2_tr,m1_tr\n    trajectories_c(seq, cpar)\n    intx1,intx2,inty1,inty2=[],[],[],[]\n    for i in range(cpar[0].num_cams):\n        intx1_t,intx2_t,inty1_t,inty2_t=[],[],[],[]\n        for j in range(m1_tr):\n            intx1_t.append(intx1_tr[i][j])",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_rclick_delete",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_rclick_delete(x, y, n):\n    \"\"\"a tool to delete clicked points\n    def py_right_click(int coord_x, int coord_y, n_image):\n    global rclick_intx1,rclick_inty1,rclick_intx2,rclick_inty2,rclick_points_x1, rclick_points_y1,rclick_count,rclick_points_intx1, rclick_points_inty1\n    x2_points,y2_points,x1,y1,x2,y2=[],[],[],[],[],[]\n    cdef volume_par *vpar = read_volume_par(\"parameters/criteria.par\")\n    r = mouse_proc_c (coord_x, coord_y, 3, n_image, vpar, cpar)\n    free(vpar)\n    if r == -1:\n        return -1,-1,-1,-1,-1,-1,-1,-1",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_get_pix_N",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_get_pix_N(x, y, n):\n    \"\"\"\n    def py_get_pix_N(x,y,n_image):\n    global pix\n    cdef int i,j\n    i=n_image\n    x1=[]\n    y1=[]\n    for j in range(num[i]):\n        x1.append(pix[i][j].x)",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_get_pix",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_get_pix(x, y):\n    \"\"\"\n    Returns a list of lists of target positions\n    def py_get_pix(x,y):\n    global pix\n    cdef int i,j\n    for i in range(cpar[0].num_cams):\n        x1=[]\n        y1=[]\n        for j in range(num[i]):",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_calibration",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_calibration(selection):\n    \"\"\"Calibration\n    def py_calibration(sel):\n    calibration_proc_c(sel)\"\"\"\n    if selection == 1:  # read calibration parameters into liboptv\n        pass\n    if selection == 2:  # run detection of targets\n        pass\n    if selection == 9:  # initial guess\n        \"\"\"Reads from a target file the 3D points and projects them on",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "py_multiplanecalibration",
        "kind": 2,
        "importPath": "ptv",
        "description": "ptv",
        "peekOfCode": "def py_multiplanecalibration(exp):\n    \"\"\"Performs multiplane calibration, in which for all cameras the pre-processed plane in multiplane.par al combined.\n    Overwrites the ori and addpar files of the cameras specified in cal_ori.par of the multiplane parameter folder\n    \"\"\"\n    for i_cam in range(exp.n_cams):  # iterate over all cameras\n        all_known = []\n        all_detected = []\n        for i in range(exp.MultiParams.n_planes):  # combine all single planes\n            c = exp.calParams.img_ori[i_cam][-9]  # Get camera id\n            file_known = exp.MultiParams.plane_name[i] + str(c) + \".tif.fix\"",
        "detail": "ptv",
        "documentation": {}
    },
    {
        "label": "AttrDict",
        "kind": 6,
        "importPath": "pyptv_batch",
        "description": "pyptv_batch",
        "peekOfCode": "class AttrDict(dict):\n    def __init__(self, *args, **kwargs):\n        super(AttrDict, self).__init__(*args, **kwargs)\n        self.__dict__ = self\ndef run_batch(new_seq_first: int, new_seq_last: int):\n    \"\"\"this file runs inside exp_path, so the other names are\n    prescribed by the OpenPTV type of a folder:\n        /parameters\n        /img\n        /cal",
        "detail": "pyptv_batch",
        "documentation": {}
    },
    {
        "label": "run_batch",
        "kind": 2,
        "importPath": "pyptv_batch",
        "description": "pyptv_batch",
        "peekOfCode": "def run_batch(new_seq_first: int, new_seq_last: int):\n    \"\"\"this file runs inside exp_path, so the other names are\n    prescribed by the OpenPTV type of a folder:\n        /parameters\n        /img\n        /cal\n        /res\n    \"\"\"\n    # read the number of cameras\n    with open(\"parameters/ptv.par\", \"r\") as f:",
        "detail": "pyptv_batch",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pyptv_batch",
        "description": "pyptv_batch",
        "peekOfCode": "def main(exp_path, first, last, repetitions=1):\n    \"\"\"runs the batch\n    Usage:\n        main([exp_dir, first, last], [repetitions])\n    Parameters:\n        list of 3 parameters in this order:\n        exp_dir : directory with the experiment data\n        first, last : integer, number of a first and last frame\n        repetitions : int, default = 1, optional\n    \"\"\"",
        "detail": "pyptv_batch",
        "documentation": {}
    },
    {
        "label": "Clicker",
        "kind": 6,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "class Clicker(ImageInspectorTool):\n    \"\"\"\n    Clicker class handles right mouse click actions from the tree\n    and menubar actions\n    \"\"\"\n    left_changed = Int(0)\n    right_changed = Int(0)\n    x,y = 0,0\n    def __init__(self, *args, **kwargs):\n        # Clicker.__init__(self,*args, **kwargs)",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "CameraWindow",
        "kind": 6,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "class CameraWindow(HasTraits):\n    \"\"\"CameraWindow class contains the relevant information and functions for\n    a single camera window: image, zoom, pan important members:\n    _plot_data  - contains image data to display (used by update_image)\n    _plot - instance of Plot class to use with _plot_data\n    _click_tool - instance of Clicker tool for the single camera window,\n    to handle mouse processing\n    \"\"\"\n    _plot = Instance(Plot)\n    _click_tool = Instance(Clicker)",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "TreeMenuHandler",
        "kind": 6,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "class TreeMenuHandler(Handler):\n    \"\"\"TreeMenuHanlder contains all the callback actions of menu bar,\n    processing of tree editor, and reactions of the GUI to the user clicks\n    possible function declarations:\n        1) to process menubar actions:\n            def function(self, info):\n        parameters: self - needed for member function declaration,\n                info - contains pointer to calling parent class (e.g main_gui)\n                To access parent class objects use info.object, for example\n                info.object.exp1 gives access to exp1 member of main_gui class",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "Plugins",
        "kind": 6,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "class Plugins(HasTraits):\n    track_list = List\n    seq_list = List\n    track_alg = Enum(values=\"track_list\")\n    sequence_alg = Enum(values=\"seq_list\")\n    view = View(\n        Group(\n            Item(name=\"track_alg\", label=\"Choose tracking algorithm:\"),\n            Item(name=\"sequence_alg\", label=\"Choose sequence algorithm:\"),\n        ),",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "MainGUI",
        "kind": 6,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "class MainGUI(HasTraits):\n    \"\"\"MainGUI is the main class under which the Model-View-Control\n    (MVC) model is defined\"\"\"\n    camera_list = List\n    # imgplt_flag = 0\n    pass_init = Bool(False)\n    update_thread_plot = Bool(False)\n    # tr_thread = Instance(TrackThread)\n    selected = Any\n    # Defines GUI view --------------------------",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "printException",
        "kind": 2,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "def printException():\n    import traceback\n    print(\"=\" * 50)\n    print(\"Exception:\", sys.exc_info()[1])\n    print(f\"{Path.cwd()}\")\n    print(\"Traceback:\")\n    traceback.print_tb(sys.exc_info()[2])\n    print(\"=\" * 50)\n# -------------------------------------------------------------\ndef main():",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "def main():\n    \"\"\"main ()\n    Raises:\n        OSError: if software or folder path are missing\n    \"\"\"\n    # Parse inputs:\n    software_path = Path.cwd().resolve()\n    print(f\"Software path is {software_path}\")\n    # Path to the experiment\n    if len(sys.argv) > 1:",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "ETSConfig.toolkit",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "ETSConfig.toolkit = 'qt4'\nimport os\nfrom pathlib import Path, PurePath\nimport sys\nimport time\nimport importlib\nimport numpy as np\nimport optv\nfrom traits.api import HasTraits, Int, Bool, Instance, List, Enum, Any\nfrom traitsui.api import (",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "ConfigMainParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "ConfigMainParams = Action(\n    name=\"Main parameters\", action=\"handler.configure_main_par(editor,object)\"\n)\nConfigCalibParams = Action(\n    name=\"Calibration parameters\",\n    action=\"handler.configure_cal_par(editor,object)\",\n)\nConfigTrackParams = Action(\n    name=\"Tracking parameters\",\n    action=\"handler.configure_track_par(editor,object)\",",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "ConfigCalibParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "ConfigCalibParams = Action(\n    name=\"Calibration parameters\",\n    action=\"handler.configure_cal_par(editor,object)\",\n)\nConfigTrackParams = Action(\n    name=\"Tracking parameters\",\n    action=\"handler.configure_track_par(editor,object)\",\n)\nSetAsDefault = Action(name=\"Set as active\", action=\"handler.set_active(editor,object)\")\nCopySetParams = Action(",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "ConfigTrackParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "ConfigTrackParams = Action(\n    name=\"Tracking parameters\",\n    action=\"handler.configure_track_par(editor,object)\",\n)\nSetAsDefault = Action(name=\"Set as active\", action=\"handler.set_active(editor,object)\")\nCopySetParams = Action(\n    name=\"Copy set of parameters\",\n    action=\"handler.copy_set_params(editor,object)\",\n)\nRenameSetParams = Action(",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "SetAsDefault",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "SetAsDefault = Action(name=\"Set as active\", action=\"handler.set_active(editor,object)\")\nCopySetParams = Action(\n    name=\"Copy set of parameters\",\n    action=\"handler.copy_set_params(editor,object)\",\n)\nRenameSetParams = Action(\n    name=\"Rename run\", action=\"handler.rename_set_params(editor,object)\"\n)\nDeleteSetParams = Action(\n    name=\"Delete run\", action=\"handler.delete_set_params(editor,object)\"",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "CopySetParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "CopySetParams = Action(\n    name=\"Copy set of parameters\",\n    action=\"handler.copy_set_params(editor,object)\",\n)\nRenameSetParams = Action(\n    name=\"Rename run\", action=\"handler.rename_set_params(editor,object)\"\n)\nDeleteSetParams = Action(\n    name=\"Delete run\", action=\"handler.delete_set_params(editor,object)\"\n)",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "RenameSetParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "RenameSetParams = Action(\n    name=\"Rename run\", action=\"handler.rename_set_params(editor,object)\"\n)\nDeleteSetParams = Action(\n    name=\"Delete run\", action=\"handler.delete_set_params(editor,object)\"\n)\n# -----------------------------------------\n# Defines the menubar\n# ------------------------------------------\nmenu_bar = MenuBar(",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "DeleteSetParams",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "DeleteSetParams = Action(\n    name=\"Delete run\", action=\"handler.delete_set_params(editor,object)\"\n)\n# -----------------------------------------\n# Defines the menubar\n# ------------------------------------------\nmenu_bar = MenuBar(\n    Menu(\n        Action(name=\"New\", action=\"new_action\"),\n        Action(name=\"Open\", action=\"open_action\"),",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "menu_bar",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "menu_bar = MenuBar(\n    Menu(\n        Action(name=\"New\", action=\"new_action\"),\n        Action(name=\"Open\", action=\"open_action\"),\n        Action(name=\"Save As\", action=\"saveas_action\"),\n        Action(name=\"Exit\", action=\"exit_action\"),\n        name=\"File\",\n    ),\n    Menu(Action(name=\"Init / Restart\", action=\"init_action\"), name=\"Start\"),\n    Menu(",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "tree_editor_exp",
        "kind": 5,
        "importPath": "pyptv_gui",
        "description": "pyptv_gui",
        "peekOfCode": "tree_editor_exp = TreeEditor(\n    nodes=[\n        TreeNode(\n            node_for=[Experiment],\n            auto_open=True,\n            children=\"\",\n            label=\"=Experiment\",\n        ),\n        TreeNode(\n            node_for=[Experiment],",
        "detail": "pyptv_gui",
        "documentation": {}
    },
    {
        "label": "PlotExample",
        "kind": 6,
        "importPath": "quiver_demo",
        "description": "quiver_demo",
        "peekOfCode": "class PlotExample(HasTraits):\n    plot = Instance(Component)\n    numpts = Int(400)\n    vectorlen = Int(15)\n    traits_view = View(Item('plot', editor=ComponentEditor(), show_label=False),\n                       width=600, height=600)\n    def _plot_default(self):\n        # Create starting points for the vectors.\n        numpts = self.numpts\n        x = sort(random(numpts))",
        "detail": "quiver_demo",
        "documentation": {}
    },
    {
        "label": "demo",
        "kind": 5,
        "importPath": "quiver_demo",
        "description": "quiver_demo",
        "peekOfCode": "demo = PlotExample()\nif __name__ == \"__main__\":\n    demo.configure_traits()",
        "detail": "quiver_demo",
        "documentation": {}
    },
    {
        "label": "QuiverPlot",
        "kind": 6,
        "importPath": "quiverplot",
        "description": "quiverplot",
        "peekOfCode": "class QuiverPlot(ScatterPlot):\n    # Determines how to interpret the data in the **vectors** data source.\n    # \t\"vector\": each tuple is a (dx, dy)\n    # \t\"radial\": each tuple is an (r, theta)\n    data_type = Enum(\"vector\", \"radial\")  # TODO: implement \"radial\"\n    # A datasource that returns an Nx2 array array indicating directions\n    # of the vectors.  The interpretation of this array is dependent on\n    # the setting of the **data_type** attribute.\n    #\n    # Usually this will be a MultiArrayDataSource.",
        "detail": "quiverplot",
        "documentation": {}
    },
    {
        "label": "DataframeScatterInspector",
        "kind": 6,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "class DataframeScatterInspector(ScatterInspector):\n    #: Data structure to gather all data to display neatly\n    data = Instance(pd.DataFrame)\nclass DataframeScatterOverlay(TextBoxOverlay):\n    \"\"\"Overlay for displaying hovered data point information.\"\"\"\n    #: The inspector tool which has hover information\n    inspector = Instance(ScatterInspector)\n    #: Function which takes and index and returns an info string.\n    message_for_data = Callable\n    @observe(\"inspector:inspector_event\")",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "DataframeScatterOverlay",
        "kind": 6,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "class DataframeScatterOverlay(TextBoxOverlay):\n    \"\"\"Overlay for displaying hovered data point information.\"\"\"\n    #: The inspector tool which has hover information\n    inspector = Instance(ScatterInspector)\n    #: Function which takes and index and returns an info string.\n    message_for_data = Callable\n    @observe(\"inspector:inspector_event\")\n    def scatter_point_found(self, event):\n        inspector_event = event.new\n        data_idx = inspector_event.event_index",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "Demo",
        "kind": 6,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "class Demo(HasTraits):\n    plot = Instance(Plot)\n    traits_view = View(\n        Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),\n        resizable=True,\n        title=title,\n    )\n    def _plot_default(self):\n        return _create_plot_component()\ndemo = Demo()",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "size = (900, 500)\ntitle = \"Tooltip demo\"\nclass Demo(HasTraits):\n    plot = Instance(Plot)\n    traits_view = View(\n        Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),\n        resizable=True,\n        title=title,\n    )\n    def _plot_default(self):",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "title = \"Tooltip demo\"\nclass Demo(HasTraits):\n    plot = Instance(Plot)\n    traits_view = View(\n        Item(\"plot\", editor=ComponentEditor(size=size), show_label=False),\n        resizable=True,\n        title=title,\n    )\n    def _plot_default(self):\n        return _create_plot_component()",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "demo",
        "kind": 5,
        "importPath": "scatter_inspector2",
        "description": "scatter_inspector2",
        "peekOfCode": "demo = Demo()\nif __name__ == \"__main__\":\n    demo.configure_traits()",
        "detail": "scatter_inspector2",
        "documentation": {}
    },
    {
        "label": "TextBoxOverlay",
        "kind": 6,
        "importPath": "text_box_overlay",
        "description": "text_box_overlay",
        "peekOfCode": "class TextBoxOverlay(AbstractOverlay):\n    \"\"\"Draws a box with a text in it\"\"\"\n    #### Configuration traits ################################################\n    # The text to display in the box.\n    text = Str\n    # The font to use for the text.\n    font = KivaFont(\"swiss 12\")\n    # The background color for the box (overrides AbstractOverlay).\n    bgcolor = ColorTrait(\"transparent\")\n    # The alpha value to apply to **bgcolor**",
        "detail": "text_box_overlay",
        "documentation": {}
    }
]